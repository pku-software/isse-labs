请帮我做一个TodoList系统，以下为具体要求，注意每完成项目的一个部分进行一次commit，至少包括初始化、后端开发、前端开发均至少一次

# 一、功能需求详解

## 1. 核心功能
1. **添加待办事项**
   - 输入框支持输入任务标题（必填）
   - 支持输入任务描述（可选）
   - 可选择任务优先级（高/中/低）
   - 可选择任务分类（工作/学习/生活/其他）
   - 点击"添加"按钮后，任务添加到列表

2. **展示待办列表**
   - 以卡片形式展示所有任务
   - 每个任务显示：标题、描述、优先级、分类、状态、创建时间
   - 不同优先级用不同颜色标识（红色-高，黄色-中，绿色-低）
   - 已完成任务显示删除线样式

3. **任务操作**
   - **完成任务**：点击"完成"按钮，任务标记为已完成，显示删除线
   - **删除任务**：点击"删除"按钮，从列表中移除任务
   - **取消完成**：已完成任务可点击"取消完成"恢复为未完成状态

4. **任务筛选**
   - 按优先级筛选：全部/高/中/低
   - 按分类筛选：全部/工作/学习/生活/其他
   - 按状态筛选：全部/未完成/已完成
   - 支持多条件组合筛选

5. **任务统计**
   - 显示任务总数
   - 显示已完成任务数
   - 显示未完成任务数
   - 显示完成率百分比

# 二、技术要求

## 后端技术栈
- **框架**：Flask 2.x
- **端口**：localhost:5000
- **数据存储**：使用 Python 列表（内存存储），不需要数据库
- **接口格式**：RESTful API，返回 JSON
- **跨域处理**：使用 flask-cors 支持跨域请求

## 前端技术栈
- **页面**：纯 HTML5
- **样式**：原生 CSS3（响应式设计）
- **脚本**：原生 JavaScript（ES6+）
- **请求**：使用 fetch API 调用后端接口
- **无需框架**：不使用 Vue、React 等框架

# 三、后端接口设计

## API 接口规范

### 3.1 获取所有任务
- **URL**: `GET /api/todos`
- **Query 参数**:
  - `priority`: 可选，筛选优先级（high/medium/low）
  - `category`: 可选，筛选分类（work/study/life/other）
  - `status`: 可选，筛选状态（completed/pending）
- **响应示例**:
```json
{
  "code": 200,
  "message": "success",
  "data": [
    {
      "id": 1,
      "title": "完成实验报告",
      "description": "完成软件工程实验报告",
      "priority": "high",
      "category": "study",
      "completed": false,
      "created_at": "2025-10-17T10:30:00"
    }
  ]
}
```

### 3.2 添加新任务
- **URL**: `POST /api/todos`
- **请求体**:
```json
{
  "title": "任务标题",
  "description": "任务描述",
  "priority": "high",
  "category": "work"
}
```
- **响应示例**:
```json
{
  "code": 201,
  "message": "任务创建成功",
  "data": {
    "id": 2,
    "title": "任务标题",
    "description": "任务描述",
    "priority": "high",
    "category": "work",
    "completed": false,
    "created_at": "2025-10-17T10:35:00"
  }
}
```

### 3.3 更新任务状态
- **URL**: `PUT /api/todos/<id>/toggle`
- **功能**: 切换任务完成状态
- **响应示例**:
```json
{
  "code": 200,
  "message": "任务状态更新成功",
  "data": {
    "id": 1,
    "completed": true
  }
}
```

### 3.4 删除任务
- **URL**: `DELETE /api/todos/<id>`
- **响应示例**:
```json
{
  "code": 200,
  "message": "任务删除成功"
}
```

### 3.5 获取任务统计
- **URL**: `GET /api/todos/stats`
- **响应示例**:
```json
{
  "code": 200,
  "data": {
    "total": 10,
    "completed": 6,
    "pending": 4,
    "completion_rate": 60.0
  }
}
```

# 四、前端页面结构设计

## 4.1 HTML 结构
```
<!DOCTYPE html>
<html>
  <head>
    - meta 标签（字符集、视口）
    - 标题
    - 引入 style.css
  </head>
  <body>
    <div class="container">
      <!-- 头部区域 -->
      <header>
        <h1>我的待办清单</h1>
        <div class="stats">统计信息</div>
      </header>
      
      <!-- 添加任务表单 -->
      <section class="add-section">
        <input type="text" id="title" placeholder="任务标题">
        <textarea id="description" placeholder="任务描述"></textarea>
        <select id="priority">
          <option value="high">高优先级</option>
          <option value="medium">中优先级</option>
          <option value="low">低优先级</option>
        </select>
        <select id="category">
          <option value="work">工作</option>
          <option value="study">学习</option>
          <option value="life">生活</option>
          <option value="other">其他</option>
        </select>
        <button id="addBtn">添加任务</button>
      </section>
      
      <!-- 筛选区域 -->
      <section class="filter-section">
        <select id="filterPriority">全部优先级</select>
        <select id="filterCategory">全部分类</select>
        <select id="filterStatus">全部状态</select>
      </section>
      
      <!-- 任务列表 -->
      <section class="todo-list" id="todoList">
        <!-- 动态生成任务卡片 -->
      </section>
    </div>
    <script src="script.js"></script>
  </body>
</html>
```

## 4.2 CSS 样式要点
- **布局**：使用 Flexbox/Grid 实现响应式布局
- **颜色方案**：
  - 高优先级：#ff4757（红色）
  - 中优先级：#ffa502（橙色）
  - 低优先级：#2ed573（绿色）
- **任务卡片**：
  - 白色背景，阴影效果
  - 圆角边框
  - 左侧彩色条表示优先级
- **交互效果**：
  - 按钮 hover 效果
  - 任务完成时的删除线动画
  - 响应式设计（适配手机、平板、桌面）

## 4.3 JavaScript 功能模块
```javascript
// 1. API 调用模块
const API_BASE = 'http://localhost:5000/api';

async function fetchTodos(filters = {}) { }
async function addTodo(todoData) { }
async function toggleTodo(id) { }
async function deleteTodo(id) { }
async function fetchStats() { }

// 2. DOM 渲染模块
function renderTodos(todos) { }
function renderStats(stats) { }
function createTodoCard(todo) { }

// 3. 事件处理模块
function handleAddTodo() { }
function handleToggleTodo(id) { }
function handleDeleteTodo(id) { }
function handleFilter() { }

// 4. 初始化
document.addEventListener('DOMContentLoaded', init);
function init() {
  // 加载任务列表
  // 绑定事件监听器
  // 加载统计信息
}
```

# 五、项目实施步骤

## 阶段一：后端开发（app.py）
1. **环境准备**
   - 安装 Flask: `pip install flask flask-cors`
   - 创建项目目录结构

2. **数据模型设计**
   - 定义 Todo 数据结构（字典格式）
   - 创建全局列表存储任务
   - 实现 ID 自增逻辑

3. **实现 API 接口**
   - 依次实现：获取任务、添加任务、更新状态、删除任务、统计信息
   - 添加输入验证和错误处理
   - 配置 CORS 跨域

4. **接口测试**
   - 使用 Postman 或 curl 测试每个接口
   - 验证参数校验、错误处理
   - 确保所有接口正常工作

## 阶段二：前端开发

### 第一步：HTML 结构（index.html）
- 创建基础 HTML 框架
- 添加所有必需的表单元素
- 添加任务列表容器

### 第二步：CSS 样式（style.css）
- 设置全局样式（字体、颜色、间距）
- 设计头部和统计区域样式
- 设计表单和按钮样式
- 设计任务卡片样式
- 添加响应式媒体查询

### 第三步：JavaScript 交互（script.js）
- 实现 API 调用函数
- 实现任务列表渲染
- 实现添加任务功能
- 实现完成/删除任务功能
- 实现筛选功能
- 实现统计信息显示

## 阶段三：测试与优化
1. **功能测试**
   - 测试所有增删改查功能
   - 测试筛选和统计功能
   - 测试边界情况（空输入、长文本等）

2. **用户体验优化**
   - 添加加载提示
   - 添加操作成功/失败提示
   - 优化动画效果
   - 优化移动端体验

3. **代码规范检查**
   - 添加必要的注释
   - 检查代码格式
   - 优化代码结构

# 六、目录结构
```
lab3-doc/
└── 李鹏宇-2200017702/
    ├── prompt.txt         # 本文件：详细的AI提示词
    ├── screenshot.png     # 功能运行截图
    ├── README.md          # 项目说明和运行方法
    ├── todo.md            # 开发日志：记录每个步骤和修改
    └── project/           # 项目代码目录
        ├── app.py         # Flask后端服务
        ├── index.html     # 前端页面结构
        ├── script.js      # 前端交互逻辑
        └── style.css      # 前端样式设计
```

# 七、文档要求

## 7.1 todo.md 开发日志
记录每个开发步骤，包括：
- 步骤序号和标题
- 执行的具体操作
- 遇到的问题和解决方案
- 代码修改说明
- 测试结果

示例格式：
```markdown
# TodoList 开发日志

## 步骤1：创建项目结构
- 创建 project 目录
- 创建 app.py, index.html, script.js, style.css 文件

## 步骤2：实现后端 API
- 安装 Flask 和 flask-cors
- 实现数据模型
- 实现 GET /api/todos 接口
- 测试结果：成功返回空列表

...
```

## 7.2 README.md 项目说明
包含以下内容：
- 项目简介
- 功能特性列表
- 技术栈说明
- 安装步骤
- 运行方法
- API 接口文档
- 使用说明
- 项目结构说明

# 八、代码规范

## Python 代码规范（app.py）
- 使用 PEP 8 代码风格
- 函数添加文档字符串
- 适当的注释说明关键逻辑
- 统一的错误处理方式
- 使用有意义的变量名

## JavaScript 代码规范（script.js）
- 使用 ES6+ 语法
- 使用 const/let，避免 var
- 使用 async/await 处理异步
- 函数添加注释说明
- 使用有意义的变量名

## HTML/CSS 规范
- 语义化 HTML 标签
- 统一的缩进（2空格或4空格）
- CSS 类名使用小写和连字符
- 添加必要的注释

# 九、开发建议

1. **严格按照阶段顺序开发**：先完成后端，测试通过后再做前端
2. **增量开发**：每完成一个功能就测试一次
3. **记录过程**：在 todo.md 中详细记录每个步骤
4. **注意错误处理**：前后端都要有完善的错误处理
5. **用户体验**：添加适当的提示信息和动画效果
6. **代码质量**：保持代码简洁、可读、可维护

# 十、验收标准

- [ ] 所有功能正常工作（添加、显示、完成、删除、筛选）
- [ ] 后端 API 返回正确的 JSON 格式
- [ ] 前端界面美观、响应式设计
- [ ] 代码结构清晰，有适当注释
- [ ] README.md 完整详细
- [ ] todo.md 记录了完整的开发过程
- [ ] 有功能运行截图
- [ ] 无明显 bug，用户体验良好