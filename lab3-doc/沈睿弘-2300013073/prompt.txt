******************
1. 第一轮
******************
项目目标
请你帮我用 Flask（后端） + HTML/CSS/JavaScript（前端） 设计一个 TodoList 任务管理系统，要求实现以下功能：
1. 用户可输入新的待办事项；
2. 待办事项展示在列表中；
3. 可删除任务；
4. 可标记任务为完成；
5. 任务可按照优先级分类（高/中/低）；
6. 任务可按类别（学习/工作/生活）进行分类与筛选。

---

 开发规范说明
目的：生成一个清晰分层、易于扩展的系统，便于教学演示与调试。
 所有代码请分模块编写，后端和前端逻辑清晰独立。

---
一、技术栈与语言定义
- 后端框架：Python Flask
- 前端：HTML + CSS + JavaScript（原生，不使用框架）
- 数据格式：JSON
- 运行方式：Flask 提供 RESTful API，前端用 fetch() 调用接口

---
二、开发顺序（强制分步）
请按以下顺序生成与测试代码，每步都需自检说明。

---
第一步：后端接口设计
1. 设计 Flask 后端，包含以下路由：
  - GET /tasks：获取全部任务；
  - POST /tasks：新增任务；
  - PUT /tasks/<id>：修改任务状态（完成/未完成）；
  - DELETE /tasks/<id>：删除任务；
  - GET /tasks?category=xxx、GET /tasks?priority=high 支持筛选。
  - GET /tasks?search= 支持搜索任务的title。并且需要支持与category和priority字段同时使用。
2. 每个任务对象字段如下：
{
  "id": 1,
  "title": "写实验报告",
  "category": "学习",
  "priority": "高",
  "completed": false,
  "创建时间": {调用服务器本地时间},
  "截止时间": {YYYY-MM-DDTHH:MM}
}
3. 暂不使用数据库，用（服务端本地）的tasks.json文件模拟存储。
4. 后端返回统一格式：
{
  "status": "success",
  "data": [...],
  "message": "新增成功"
}
5. 编写 app.py，测试接口在 Postman 或浏览器中能正常返回。你不需要实际运行代码进程测试，你只需要为我写好测试的脚本（负责发送请求）和如何测试。我会运行服务端的python文件并完成测试。
6. 我已经提供了一个实现了一部分功能的 app.py 请在这一代码的基础上进行修改。
7. 如果截止时间早于创建时间，需要报错 新增失败

---

三：开发规范：

类别,规范内容
路由命名,使用 RESTful 风格
变量命名,"驼峰命名法 (addTask, getTasks)"
数据交互,全部使用 JSON
错误处理,"返回 ""status"": ""error"" 和 ""message"" 字段"
注释规范,每个函数写一句用途说明
样式规范,"使用浅灰背景 + 卡片式任务框, hover有轻微阴影"
代码测试,每完成一个接口后先用 Postman 测试，再接前端

---

******************
2. 第二轮
******************

项目目标
请你帮我用 Flask（后端） + HTML/CSS/JavaScript（前端） 设计一个 TodoList 任务管理系统，要求实现以下功能：
1. 用户可输入新的待办事项；
2. 待办事项展示在列表中；
3. 可删除任务；
4. 可标记任务为完成；
5. 任务可按照优先级分类（高/中/低）；
6. 任务可按类别（学习/工作/生活）进行分类与筛选。

---

 开发规范说明
目的：生成一个清晰分层、易于扩展的系统，便于演示与调试。
 所有代码请分模块编写，后端和前端逻辑清晰独立。

---
一、技术栈与语言定义
- 后端框架：Python Flask
- 前端：HTML + CSS + JavaScript（原生，不使用框架）
- 数据格式：JSON
- 运行方式：Flask 提供 RESTful API，前端用 fetch() 调用接口

---
二、开发顺序
我已经完成了第一步 app.py 的后端设计，现在需要你进行第二步：前端页面结构设计（不需要设计js脚本，仅完成 index.html 以及 style.css文件）请尽你所能，设计一个好看的前端页面。

1. 设计一个主页面 index.html，包含以下部分：
（添加TodoList部分）
  - 输入框（输入待办事项标题）；
  - “添加任务”按钮；
（TodoList显示部分）
  - 筛选菜单（选择分类与优先级，以按钮形式呈现，例如 全部/高/中/低 等）；
  - 搜索菜单，在下拉菜单的选择的基础上 按照指定的字段名进行搜索
  - 任务展示区（列表形式，每项包含任务名、类别、优先级、标注为完成按钮、其他操作按钮（降低优先级/提高优先级/删除））。
  - 已完成任务展示区（默认收起，可点击展开）
2. 页面的布局简洁，从上到下依次是：
  - 项目标题
  - 统计信息（当前的任务总计、进行中的任务、已完成）
  - 输入表单；
  - 筛选功能区（按分类 / 优先级）。 
  - 任务列表
3. 样式说明：
  - 已完成任务的显示需要加删除线,同时使用浅灰色底纹显示；
  - 高优先级任务浅红色底纹标识。中优先级任务使用浅黄色底纹，低优先级任务使用浅绿色底纹
  - 任务展示区排列方式  第一关键字是 优先级  第二关键字是 dueTime
  - 某个任务被删除或者被完成之后，有一个消失的动画

---

三：开发规范：

类别,规范内容
路由命名,使用 RESTful 风格
变量命名,"驼峰命名法 (addTask, getTasks)"
数据交互,全部使用 JSON
错误处理,"返回 ""status"": ""error"" 和 ""message"" 字段"
注释规范,每个函数写一句用途说明
样式规范,"使用浅灰背景 + 卡片式任务框, hover有轻微阴影"


******************
3. 第三轮
******************
现在，请为我完成前端的逻辑与交互部分。
1. 使用 fetch() 调用后端 API，实现以下功能：
  - 添加任务：POST；
  - 加载任务列表：GET；
  - 删除任务：DELETE；
  - 切换任务状态：PUT；
  - 分类/优先级筛选：GET（带查询参数）。
2. 每次操作后自动刷新列表。
3. 编写 static/script.js，逻辑清晰、模块化：
  - loadTasks()
  - addTask()
  - deleteTask(id)
  - toggleTask(id)
  - filterTasks()

函数有需要你可以自行增删或者修改，在完成后告诉我如何进行测试。